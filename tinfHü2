
TINF ASSIGNMENT 02


-> fork :  fork()  The purpose of fork()is to create a new process, which becomes the child process of the caller. After a new child process is created,
                   both processes will execute the next instruction following thefork() system call.
                   Therefore, we have to distinguish the parent from the child.
                   In fork both parent and child sharing the same memory with copy on write mechanism.

                    function arguments: void

->stat:             These funktion returns informations about a file. You dont need permissions.
                    The stats are pointed in a a buffer.

                    function arguments: const char *filename, struct stat *buf

-> kill:            kill command to terminates stalled or unwanted processes without having to log out or restart the server.

                    function arguments: int option, int pid

-> mmap:            It creates a memory mapping in the virtual address space of the process.
                    It's creating an anonymous mapping, which is rather like using malloc to allocate n bytes of memory.

                    function arguments: void *addr, size_t length, int prot, int flags, int fd, off_t offset

-> chmod:           This manual page documents the GNU version of chmod. chmod changes the file mode bits
                    of each given file according to mode, which can be either a symbolic representation of changes
                    to make, or an octal number representing the bit pattern for the new mode bits.

                    function arguments:
                    chmod [OPTION]... MODE[,MODE]... FILE...
                    chmod [OPTION]... OCTAL-MODE FILE...
                    chmod [OPTION]... --reference=RFILE FILE...


-> waitpid:         All of these system calls are used to wait for state changes in a child of the calling process,
                    and obtain information about the child whose state has changed. A state change is considered to be:
                    the child terminated; the child was stopped by a signal; or the child was resumed by a signal.

                    function arguments: pid_t pid, int *stat_loc, int options

Fail Conditions

-> fork:            fails if maximum processes are reached or memory is full.

-> exec:            fails if the process image is invalid or has a wrong filename

-> unlink:          fails if the file is already unlinked/not found or the file is used by another process or not allowed to delete because of its security.

-> read:            fails if the file doesn't exist, or because of laking premissions. DIR or simply an I/O error not caused by the system call itself.

-> mount:           fails if read only DIR, corrupt files, wrong file path or when source already mounted.

-> chmod:           fails if used false filepath

-> kill:            fails if invalid PPID is used

TRAPS:

A trap is used to enter kernel mode. The system ( kernel ) instruction is loaded and the trap is called and those loaded instructions will be done.